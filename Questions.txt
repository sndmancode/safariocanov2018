1) Given:
  class X {
    static int MAX_VAL = 100;
    int value = 99;
    public void setVal(int x) {
      if (x <= MAX_VAL) value = x;
    }
  }
and:
    X a = new X();
    X b = new X();
    a.setVal(120);
    System.out.print(a.value + ", ");
    b.MAX_VAL = 150; // EQUIVALENT to X.MAX_VAL... (and legal!)
    a.setVal(140);
    System.out.println(a.value);

    What is the result?
A) 99, 99
B) 120, 140
C) 99, 140
D) Compilation failure
E) Exception at runtime

2)
 class Y {
    static String sayHi() {
      return "Y-Hello";
    }
    String sayHi2() {
      return "Y-Hello2";
    }
  }
  class Z extends Y {
    static String sayHi() {
      return "Z-Hello";
    }
    String sayHi2() {
      return "Z-Hello2";
    }
  }

Y y = new Z();  // a Z "is a" Y
System.out.println(y.sayHi() + ", " + y.sayHi2());
// equivalent to:
//System.out.println(Y.sayHi() + ", " + y.sayHi2());

What is the result?
    A) Y-Hello, Y-Hello2
    B) Y-Hello, Z-Hello2
    C) Z-Hello, Z-Hello2
    D) Z-Hello, Y-Hello2
    E) Compilation fails

3)
  class Base {
    void doBaseStuff() {
      System.out.println("doBaseStuff");
    }
  }

  class Sub extends Base {
    void doBaseStuff() {
      System.out.println("doSubStuff");
    }
    void doOtherStuff() {
      System.out.println("doOtherStuff");
    }
  }

In the Base and Sub classes, which are true in isolation?
x    A) doBaseStuff in Base can be marked public without causing errors
y    B) doBaseStuff in Base can be marked private without causing errors
y    C) doBaseStuff in Sub can be marked public without causing errors
y    D) doBaseStuff in Sub can be marked protected without causing errors
n    E) doBaseStuff in Sub can be marked private without causing errors

4)
Given
  class Base {
    int doBaseStuff() {
      System.out.println("doBaseStuff");
      return 1;
    }
  }
  class Sub extends Base {
    // Line n1
  }

Which may be defined at the point marked Line n1
A) int doBaseStuff() {return 2;}
B) short doBaseStuff() { return (short)2;}
C) String doBaseStuff() { return "Hello";}
D) String doBaseStuff(int x) { return "Hello";}

5)
Given:
  String s;

How much memory is allocated?
A) None
B) 4 bytes
C) enough for one String object

6)
Given
String s1 = new String("Hello");
String s2 = new String("Hello");
StringBuilder s3 = new StringBuilder("Hello");
StringBuilder s4 = new StringBuilder("Hello");

which are true?
A) s1 == s2
B) s1.equals(s2)
C) s1.equals(s3)
D) s3.equals(s4)
E) s3 == s4

7)
Given
String s1 = "Hello";
String s2 = "Hello";
String s3 = new String("Hello");
Which are true?
A) s1 == s2
B) s2 == s3
C) s1 == s3

8)
Given
 public void q11A(int x) {
   x = x + 1;
 }
and:
int x = 99;
q11A(x);
System.out.println(x);

What is the result
    A) 99
    B) 100
    C) An error

9)
  public void q12A(StringBuilder x) {
    x.append(" world");
  }

StringBuilder x = new StringBuilder("Hello");
q12A(x);
System.out.println(x);

What is the result?
    A) Hello
    B) Hello world
    C)  world
    D) An error

10)
  public void q12A(String x) {
    x.concat(" world");
  }

String x = new String("Hello");
q12A(x);
System.out.println(x);

What is the result?
    A) Hello
    B) Hello world
    C)  world
    D) An error

Q11)
  public void q12A(String x) {
    x = x.concat(" world");
  }

String x = new String("Hello");
q12A(x);
System.out.println(x);

What is the result?
    A) Hello
    B) Hello world
    C)  world
    D) An error

Q12)
Which compile?
A) Object o = (String s) -> s.length() > 3;
B) Predicate<String> ps = (StringBuilder sb) -> sb.length() > 3;
C) Predicate<LocalDate> pld = x -> true;
D) Predicate<String> ps = String s -> s.length() < 6;
E) Predicate<String> ps = (s) -> return s.length() < 6;



